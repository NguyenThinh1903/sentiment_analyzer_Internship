# app.py (ƒê√£ Vi·ªát h√≥a giao di·ªán ng∆∞·ªùi d√πng)

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import os
import time

import config
from predict import SentimentPredictor
# Gi·∫£ s·ª≠ c√°c file ·∫£nh ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi evaluate.py
# from visualization import plot_confusion_matrix

# --- C·∫•u h√¨nh Trang ---
st.set_page_config(
    page_title="Ph√¢n t√≠ch C·∫£m x√∫c Kh√°ch h√†ng",
    page_icon="üòä",
    layout="wide"
)

# --- T·∫£i Predictor (S·ª≠ d·ª•ng cache) ---
@st.cache_resource # Cache vi·ªác t·∫£i model
def load_predictor(model_path=config.MODEL_SAVE_PATH):
    """T·∫£i instance c·ªßa SentimentPredictor."""
    print("ƒêang th·ª≠ t·∫£i Sentiment Predictor...")
    predictor = SentimentPredictor(model_path=model_path)
    if not predictor.model or not predictor.tokenizer:
        # Hi·ªÉn th·ªã l·ªói ngay tr√™n UI n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c model
        st.error(f"L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ t·∫£i model t·ª´ '{model_path}'. ƒê·∫£m b·∫£o model ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v√† l∆∞u ƒë√∫ng ch·ªó.")
        return None # Tr·∫£ v·ªÅ None ƒë·ªÉ b√°o hi·ªáu l·ªói
    print("Sentiment Predictor ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
    return predictor

predictor = load_predictor()

# --- H√†m tr·ª£ gi√∫p ---
def display_probabilities_pie(probabilities_dict):
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán x√°c su·∫•t c√°c c·∫£m x√∫c."""
    if probabilities_dict:
        # L·∫•y nh√£n v√† gi√° tr·ªã t·ª´ dict, ƒë·∫£m b·∫£o ƒë√∫ng th·ª© t·ª± n·∫øu c·∫ßn
        labels = list(probabilities_dict.keys())
        values = list(probabilities_dict.values())
        # S·∫Øp x·∫øp theo th·ª© t·ª± mong mu·ªën (v√≠ d·ª•: Ti√™u c·ª±c, Trung t√≠nh, T√≠ch c·ª±c)
        sorted_labels = ["Ti√™u c·ª±c", "Trung t√≠nh", "T√≠ch c·ª±c"]
        try:
            # C·ªë g·∫Øng s·∫Øp x·∫øp theo th·ª© t·ª± tr√™n, b·ªè qua n·∫øu nh√£n kh√¥ng t·ªìn t·∫°i
            label_map_inv = {v: k for k, v in config.LABEL_MAP.items()} # Map ng∆∞·ª£c ƒë·ªÉ l·∫•y index
            values_sorted = sorted(zip(labels, values), key=lambda item: label_map_inv.get(item[0], 99)) # S·∫Øp x·∫øp theo index, nh√£n l·∫° cu·ªëi c√πng
            labels_sorted = [item[0] for item in values_sorted]
            values_final = [item[1] for item in values_sorted]
            labels_final = labels_sorted
        except Exception: # N·∫øu c√≥ l·ªói s·∫Øp x·∫øp, d√πng th·ª© t·ª± g·ªëc
             labels_final = labels
             values_final = values

        # ƒê·ªãnh nghƒ©a m√†u s·∫Øc t∆∞∆°ng ·ª©ng
        color_map = {"Ti√™u c·ª±c": '#DC143C', "Trung t√≠nh": '#FFD700', "T√≠ch c·ª±c": '#32CD32', "Kh√¥ng x√°c ƒë·ªãnh": '#808080'}
        colors = [color_map.get(label, '#808080') for label in labels_final]


        fig = go.Figure(data=[go.Pie(labels=labels_final, values=values_final, hole=.3,
                                     marker_colors=colors,
                                     pull=[0.05 if v == max(values_final) else 0 for v in values_final] # K√©o mi·∫øng l·ªõn nh·∫•t
                                     )])
        fig.update_layout(
            title_text='Ph√¢n b·ªï X√°c su·∫•t C·∫£m x√∫c',
            legend_title_text='C·∫£m x√∫c',
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.write("Kh√¥ng c√≥ d·ªØ li·ªáu x√°c su·∫•t ƒë·ªÉ hi·ªÉn th·ªã.")

# --- Giao di·ªán Ch√≠nh c·ªßa ·ª®ng d·ª•ng ---
st.title("üìä Web App Ph√¢n T√≠ch C·∫£m X√∫c Ph·∫£n H·ªìi Kh√°ch H√†ng")
st.markdown("""
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng ph√¢n t√≠ch c·∫£m x√∫c!
·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng m√¥ h√¨nh h·ªçc s√¢u (Deep Learning) d·ª±a tr√™n *Transformers* ƒë·ªÉ d·ª± ƒëo√°n c·∫£m x√∫c
(**T√≠ch c·ª±c**, **Ti√™u c·ª±c**, **Trung t√≠nh**) t·ª´ vƒÉn b·∫£n ph·∫£n h·ªìi c·ªßa kh√°ch h√†ng.
""")

# --- Ki·ªÉm tra Model ƒë√£ t·∫£i ƒë∆∞·ª£c ch∆∞a ---
if predictor is None:
    st.warning("Model ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra l·ªói ·ªü tr√™n ho·∫∑c ƒë·ª£i qu√° tr√¨nh t·∫£i ho√†n t·∫•t.")
    st.stop() # D·ª´ng th·ª±c thi n·∫øu model kh√¥ng t·∫£i ƒë∆∞·ª£c

# --- C√°c Tab ch·ª©c nƒÉng ---
tab1, tab2, tab3 = st.tabs(["üîç Ph√¢n t√≠ch VƒÉn b·∫£n ƒê∆°n l·∫ª", "üìÑ Ph√¢n t√≠ch File CSV", "üìà ƒê√°nh gi√° Model"])

# --- Tab 1: Ph√¢n t√≠ch ƒê∆°n l·∫ª ---
with tab1:
    st.header("Nh·∫≠p ph·∫£n h·ªìi c·∫ßn ph√¢n t√≠ch:")
    user_input = st.text_area("Nh·∫≠p vƒÉn b·∫£n v√†o ƒë√¢y...", height=150, key="single_text_input", placeholder="V√≠ d·ª•: Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m r·∫•t t·ªët, t√¥i r·∫•t h√†i l√≤ng!")

    if st.button("üöÄ Ph√¢n t√≠ch Ngay!", key="analyze_single"):
        if user_input and user_input.strip():
            start_time = time.time()
            # Hi·ªÉn th·ªã spinner trong khi ch·ªù d·ª± ƒëo√°n
            with st.spinner('üß† ƒêang ph√¢n t√≠ch, vui l√≤ng ch·ªù...'):
                label, confidence, probabilities = predictor.predict_single(user_input)
            end_time = time.time()

            if label is not None:
                st.subheader("K·∫øt qu·∫£ Ph√¢n t√≠ch:")
                col1, col2 = st.columns([1, 2]) # Chia c·ªôt ƒë·ªÉ hi·ªÉn th·ªã g·ªçn h∆°n
                with col1:
                    # Hi·ªÉn th·ªã nh√£n v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
                    if label == config.LABEL_MAP[2]: # T√≠ch c·ª±c
                        st.success(f"**C·∫£m x√∫c:** {label}")
                    elif label == config.LABEL_MAP[0]: # Ti√™u c·ª±c
                        st.error(f"**C·∫£m x√∫c:** {label}")
                    else: # Trung t√≠nh ho·∫∑c kh√°c
                        st.warning(f"**C·∫£m x√∫c:** {label}")
                    # Hi·ªÉn th·ªã ƒë·ªô tin c·∫≠y d·∫°ng %
                    st.metric(label="ƒê·ªô tin c·∫≠y", value=f"{confidence:.2%}")
                    st.caption(f"Th·ªùi gian x·ª≠ l√Ω: {end_time - start_time:.2f} gi√¢y")

                with col2:
                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n x√°c su·∫•t
                    display_probabilities_pie(probabilities)
            else:
                st.error("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh d·ª± ƒëo√°n ho·∫∑c ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ ph√¢n t√≠ch.")

# --- Tab 2: Ph√¢n t√≠ch H√†ng lo·∫°t (CSV) ---
with tab2:
    st.header("T·∫£i l√™n file CSV ƒë·ªÉ ph√¢n t√≠ch h√†ng lo·∫°t:")
    uploaded_file = st.file_uploader(
        f"Ch·ªçn file CSV (ph·∫£i c√≥ c·ªôt t√™n l√† '{config.TEXT_COLUMN}')",
        type=["csv"],
        key="csv_uploader",
        help=f"File CSV c·ªßa b·∫°n c·∫ßn c√≥ √≠t nh·∫•t m·ªôt c·ªôt ch·ª©a vƒÉn b·∫£n ph·∫£n h·ªìi. H√£y ƒë·∫£m b·∫£o t√™n c·ªôt ƒë√≥ l√† '{config.TEXT_COLUMN}' nh∆∞ ƒë√£ c·∫•u h√¨nh."
    )

    if uploaded_file is not None:
        try:
            with st.spinner("ƒêang ƒë·ªçc file CSV..."):
                # C·ªë g·∫Øng ƒë·ªçc v·ªõi encoding utf-8-sig ƒë·ªÉ x·ª≠ l√Ω BOM n·∫øu c√≥
                try:
                    df = pd.read_csv(uploaded_file, encoding='utf-8-sig')
                except UnicodeDecodeError:
                    st.warning("Kh√¥ng th·ªÉ ƒë·ªçc b·∫±ng UTF-8-SIG, th·ª≠ UTF-8...")
                    df = pd.read_csv(uploaded_file, encoding='utf-8')

            st.success(f"‚úÖ ƒê√£ t·∫£i l√™n file '{uploaded_file.name}' v·ªõi {len(df)} d√≤ng.")

            # Ki·ªÉm tra xem c·ªôt text c√≥ t·ªìn t·∫°i kh√¥ng
            if config.TEXT_COLUMN not in df.columns:
                st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt '{config.TEXT_COLUMN}' trong file CSV ƒë√£ t·∫£i l√™n.")
                st.info(f"Vui l√≤ng ƒë·∫£m b·∫£o file CSV c·ªßa b·∫°n c√≥ c·ªôt t√™n ch√≠nh x√°c l√† '{config.TEXT_COLUMN}'.")
            else:
                # Hi·ªÉn th·ªã b·∫£n xem tr∆∞·ªõc
                st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu (5 d√≤ng ƒë·∫ßu):")
                st.dataframe(df.head(), use_container_width=True)

                if st.button("üìä Ph√¢n t√≠ch File CSV", key="analyze_csv"):
                    start_time = time.time()
                    progress_bar = st.progress(0, text="B·∫Øt ƒë·∫ßu ph√¢n t√≠ch...") # Th√™m thanh ti·∫øn tr√¨nh
                    status_text = st.empty() # V·ªã tr√≠ ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i

                    # H√†m callback ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh (v√≠ d·ª•, n·∫øu predict_batch_df h·ªó tr·ª£)
                    # Hi·ªán t·∫°i, ch√∫ng ta s·∫Ω m√¥ ph·ªèng ti·∫øn tr√¨nh
                    results_df = None
                    total_rows = len(df)
                    try:
                        # --- B·∫Øt ƒë·∫ßu d·ª± ƒëo√°n ---
                        # L∆∞u √Ω: predict_batch_df trong v√≠ d·ª• hi·ªán t·∫°i x·ª≠ l√Ω t·ª´ng d√≤ng,
                        # n√™n vi·ªác c·∫≠p nh·∫≠t progress bar ch√≠nh x√°c c·∫ßn s·ª≠a ƒë·ªïi h√†m ƒë√≥
                        # ·ªû ƒë√¢y, ch√∫ng ta ch·ªâ hi·ªÉn th·ªã spinner v√† th√¥ng b√°o chung
                        with st.spinner(f"‚è≥ ƒêang ph√¢n t√≠ch c·ªôt '{config.TEXT_COLUMN}'... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t."):
                             results_df = predictor.predict_batch_df(df.copy(), config.TEXT_COLUMN)
                             # Gi·∫£ l·∫≠p ho√†n th√†nh progress bar sau khi xong
                             progress_bar.progress(100, text="Ph√¢n t√≠ch ho√†n t·∫•t!")

                    except Exception as batch_error:
                         st.error(f"L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh ph√¢n t√≠ch h√†ng lo·∫°t: {batch_error}")
                         progress_bar.progress(100, text="Ph√¢n t√≠ch th·∫•t b·∫°i!") # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh khi l·ªói


                    end_time = time.time()

                    if results_df is not None:
                        st.success(f"‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t sau {end_time - start_time:.2f} gi√¢y!")

                        # Hi·ªÉn th·ªã Th·ªëng k√™ T·ªïng h·ª£p
                        st.subheader("Th·ªëng k√™ C·∫£m x√∫c T·ªïng h·ª£p:")
                        # ƒê·∫£m b·∫£o x·ª≠ l√Ω tr∆∞·ªùng h·ª£p c·ªôt d·ª± ƒëo√°n kh√¥ng t·ªìn t·∫°i ho·∫∑c r·ªóng
                        if 'predicted_label' in results_df.columns and not results_df['predicted_label'].empty:
                            sentiment_counts = results_df['predicted_label'].value_counts()
                            # ƒê·∫£m b·∫£o d√πng ƒë√∫ng t√™n nh√£n t·ª´ config
                            valid_labels = list(config.LABEL_MAP.values()) + ["L·ªói D·ª± ƒëo√°n"] # Bao g·ªìm c·∫£ nh√£n l·ªói
                            sentiment_counts = sentiment_counts.reindex(valid_labels, fill_value=0) # ƒê·∫£m b·∫£o ƒë·ªß 3 nh√£n + l·ªói

                            color_map_stats = {"Ti√™u c·ª±c": '#DC143C', "Trung t√≠nh": '#FFD700', "T√≠ch c·ª±c": '#32CD32', "L·ªói D·ª± ƒëo√°n": '#808080'}
                            colors_stats = [color_map_stats.get(label, '#808080') for label in sentiment_counts.index]


                            fig_bar = px.bar(
                                sentiment_counts,
                                x=sentiment_counts.index,
                                y=sentiment_counts.values,
                                labels={'x': 'C·∫£m x√∫c', 'y': 'S·ªë l∆∞·ª£ng'},
                                title='Ph√¢n ph·ªëi S·ªë l∆∞·ª£ng C·∫£m x√∫c',
                                color=sentiment_counts.index,
                                color_discrete_map=color_map_stats,
                                text=sentiment_counts.values
                            )
                            fig_bar.update_layout(showlegend=False)

                            # Ch·ªâ v·∫Ω pie chart n·∫øu c√≥ d·ªØ li·ªáu h·ª£p l·ªá (kh√¥ng ch·ªâ c√≥ l·ªói)
                            valid_counts = sentiment_counts.drop("L·ªói D·ª± ƒëo√°n", errors='ignore') # B·ªè qua nh√£n l·ªói
                            if valid_counts.sum() > 0:
                                fig_pie = go.Figure(data=[go.Pie(
                                    labels=valid_counts.index,
                                    values=valid_counts.values,
                                    hole=.3,
                                    marker_colors=[color_map_stats.get(label, '#808080') for label in valid_counts.index],
                                )])
                                fig_pie.update_layout(title_text='T·ª∑ l·ªá Ph·∫ßn trƒÉm C·∫£m x√∫c (Kh√¥ng t√≠nh l·ªói)')
                            else:
                                fig_pie = None # Kh√¥ng v·∫Ω pie n·∫øu to√†n l·ªói

                            col_stats1, col_stats2 = st.columns(2)
                            with col_stats1:
                                st.plotly_chart(fig_bar, use_container_width=True)
                            with col_stats2:
                                if fig_pie:
                                     st.plotly_chart(fig_pie, use_container_width=True)
                                else:
                                     st.info("Kh√¥ng c√≥ d·ªØ li·ªáu c·∫£m x√∫c h·ª£p l·ªá ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì tr√≤n.")
                        else:
                             st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'predicted_label' ho·∫∑c kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ th·ªëng k√™.")

                        # Hi·ªÉn th·ªã K·∫øt qu·∫£ Chi ti·∫øt (c√≥ th·ªÉ ph√¢n trang ho·∫∑c gi·ªõi h·∫°n n·∫øu c·∫ßn)
                        st.subheader("K·∫øt qu·∫£ Chi ti·∫øt:")
                        # T√πy ch·ªçn: Gi·ªõi h·∫°n s·ªë d√≤ng hi·ªÉn th·ªã ban ƒë·∫ßu
                        # st.dataframe(results_df.head(100), use_container_width=True)
                        # if len(results_df) > 100:
                        #    st.caption(f"Hi·ªÉn th·ªã 100/{len(results_df)} d√≤ng ƒë·∫ßu ti√™n.")
                        st.dataframe(results_df, use_container_width=True)

                        # Th√™m n√∫t t·∫£i xu·ªëng
                        @st.cache_data # Cache vi·ªác chuy·ªÉn ƒë·ªïi DF sang CSV
                        def convert_df_to_csv(df_to_convert):
                            try:
                                # S·ª≠ d·ª•ng encoding utf-8-sig ƒë·ªÉ Excel ƒë·ªçc ti·∫øng Vi·ªát t·ªët h∆°n
                                return df_to_convert.to_csv(index=False).encode('utf-8-sig')
                            except Exception as e:
                                print(f"L·ªói khi chuy·ªÉn ƒë·ªïi DataFrame sang CSV: {e}")
                                return None

                        csv_output = convert_df_to_csv(results_df)
                        if csv_output:
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng K·∫øt qu·∫£ (CSV)",
                                data=csv_output,
                                file_name=f'phan_tich_cam_xuc_{uploaded_file.name}.csv', # T√™n file ti·∫øng Vi·ªát
                                mime='text/csv',
                            )
                        else:
                            st.error("Kh√¥ng th·ªÉ t·∫°o file CSV ƒë·ªÉ t·∫£i xu·ªëng.")

                    # Kh√¥ng c·∫ßn else ·ªü ƒë√¢y v√¨ l·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong kh·ªëi try-except predict_batch_df

        except UnicodeDecodeError:
            st.error("L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc file CSV. File c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c m√£ h√≥a ƒë√∫ng d·∫°ng UTF-8. Vui l√≤ng ki·ªÉm tra v√† l∆∞u l·∫°i file v·ªõi m√£ h√≥a UTF-8.")
        except pd.errors.EmptyDataError:
             st.error("L·ªói: File CSV b·ªã r·ªóng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu.")
        except Exception as e:
            st.error(f"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω file CSV: {e}")
            st.warning("H√£y ƒë·∫£m b·∫£o file CSV c·ªßa b·∫°n h·ª£p l·ªá.")


# --- Tab 3: ƒê√°nh gi√° Model ---
with tab3:
    st.header("Th√¥ng tin ƒê√°nh gi√° Model")
    st.markdown("K·∫øt qu·∫£ ƒë√°nh gi√° hi·ªáu nƒÉng c·ªßa model tr√™n t·∫≠p d·ªØ li·ªáu ki·ªÉm th·ª≠ (test set):")

    # T·∫£i v√† hi·ªÉn th·ªã c√°c ch·ªâ s·ªë t·ª´ file b√°o c√°o
    report_path = config.CLASSIFICATION_REPORT_FILE
    cm_path = config.CONFUSION_MATRIX_FILE
    curves_path = config.TRAINING_CURVES_FILE

    if os.path.exists(report_path):
        try:
            with open(report_path, 'r', encoding='utf-8') as f: # Th√™m encoding='utf-8'
                lines = f.readlines()
                accuracy_line = next((line for line in lines if "ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p Test:" in line), None) # T√¨m d√≤ng accuracy ti·∫øng Vi·ªát
                accuracy = float(accuracy_line.split(":")[1].strip()) if accuracy_line else None

                report_content = "".join(lines) # L·∫•y to√†n b·ªô n·ªôi dung b√°o c√°o

            col_metric1, col_metric2 = st.columns(2)
            with col_metric1:
                 if accuracy is not None:
                    # Hi·ªÉn th·ªã accuracy d∆∞·ªõi d·∫°ng metric
                    st.metric("Accuracy T·ªïng th·ªÉ (tr√™n t·∫≠p Test)", f"{accuracy:.2%}")
                 else:
                     st.info("Kh√¥ng t√¨m th·∫•y th√¥ng tin Accuracy trong file b√°o c√°o.")
            # B·∫°n c√≥ th·ªÉ th√™m c√°c metric kh√°c n·∫øu parse ƒë∆∞·ª£c t·ª´ report (v√≠ d·ª• F1-score)
            # with col_metric2:
            #    st.metric("F1-score (Weighted - n·∫øu c√≥)", "...")

            st.subheader("B√°o c√°o Ph√¢n lo·∫°i Chi ti·∫øt:")
            st.text(report_content) # Hi·ªÉn th·ªã n·ªôi dung file report

        except FileNotFoundError:
             st.warning(f"Kh√¥ng t√¨m th·∫•y file b√°o c√°o ph√¢n lo·∫°i t·∫°i: {report_path}")
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc ho·∫∑c ph√¢n t√≠ch file b√°o c√°o ({report_path}): {e}")
    else:
        st.info(f"Ch∆∞a c√≥ file ƒë√°nh gi√° ({report_path}). H√£y ch·∫°y script `python evaluate.py` tr∆∞·ªõc.")

    # Hi·ªÉn th·ªã Ma tr·∫≠n Nh·∫ßm l·∫´n
    st.subheader("Ma tr·∫≠n Nh·∫ßm l·∫´n (Confusion Matrix):")
    if os.path.exists(cm_path):
        try:
             st.image(cm_path, caption="Ma tr·∫≠n Nh·∫ßm l·∫´n tr√™n t·∫≠p Test")
        except Exception as e:
             st.warning(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh ma tr·∫≠n nh·∫ßm l·∫´n ({cm_path}): {e}")
    else:
        st.info(f"Ch∆∞a c√≥ ·∫£nh ma tr·∫≠n nh·∫ßm l·∫´n ({cm_path}). H√£y ch·∫°y script `python evaluate.py`.")

    # Hi·ªÉn th·ªã Bi·ªÉu ƒë·ªì Hu·∫•n luy·ªán
    st.subheader("Bi·ªÉu ƒë·ªì Qu√° tr√¨nh Hu·∫•n luy·ªán:")
    if os.path.exists(curves_path):
         try:
            st.image(curves_path, caption="Bi·ªÉu ƒë·ªì Loss v√† Accuracy trong qu√° tr√¨nh Hu·∫•n luy·ªán/Ki·ªÉm ƒë·ªãnh")
         except Exception as e:
             st.warning(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh bi·ªÉu ƒë·ªì hu·∫•n luy·ªán ({curves_path}): {e}")
    else:
        st.info(f"Ch∆∞a c√≥ ·∫£nh bi·ªÉu ƒë·ªì hu·∫•n luy·ªán ({curves_path}). H√£y ch·∫°y script `train.py` v√† `evaluate.py`.")


# --- Footer ---
st.markdown("---")
st.caption("D·ª± √°n Th·ª±c t·∫≠p 8 Tu·∫ßn - Ph√¢n t√≠ch C·∫£m x√∫c - X√¢y d·ª±ng b·ªüi Nguy·ªÖn Tr·∫ßn Ho√†ng Th·ªãnh")